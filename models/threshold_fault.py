from sqlalchemy import Column, Integer, Float, String, Boolean, ForeignKey
from sqlalchemy.orm import relationship, backref
from models import Base

class ThresholdFault(Base):
  """
  ThresholdFault class (threshold_faults table)

  Describe an analog fault, which is generated by an AnalogDevice.
  The AnalogDevice provides a compressed analog value from the device,
  the compressed value is expressed a reduced number of bits (e.g. 12).
  The compressed value is compared to the compressed_threshold to
  define a fault. This entry also has a floting point analog_threshold
  that is equivalent to the compressed_threshold value.

  Properties:
    name: short fault description
    analog_threshold: actual analog threshold value for the fault
    compressed_threshold: compressed value that gets compared with the
                          measured AnalogDevice value
    greater_than: if true, if the AnalogDevice value is larger than the 
                  compressed_threshold then a ThresholdFault is generated
                  if false, if the AnalogDevice value is smaller than the
                  compressed threshold then a ThresholdFault is generated

  Relationships:
    threshold_fault_state: through the ThresholdFaultStates this
    ThresholdFault is linked to an AllowedClass (allowed beam class)
  """
  __tablename__ = 'threshold_faults'
  id = Column(Integer, primary_key=True)
  name = Column(String, nullable=False)
  analog_device_id = Column(Integer, ForeignKey('analog_devices.id'), nullable=False)
  analog_threshold = Column(Float, nullable=False)
  compressed_threshold = Column(Integer, nullable=False)
  #If greater_than is true, a value larger than the threshold will generate a fault.
  #If greater_than is false, a value smaller than the threshold will generate a fault.
  greater_than = Column(Boolean, nullable=False)
  threshold_fault_state = relationship("ThresholdFaultState", uselist=False, backref="threshold_fault")
  
  @property
  def less_than(self):
    return not self.greater_than
